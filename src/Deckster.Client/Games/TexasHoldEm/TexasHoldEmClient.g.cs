using Deckster.Core.Games.TexasHoldEm;
using System;
using System.Diagnostics;
using Deckster.Core.Communication;
using Deckster.Core.Protocol;
using Deckster.Core.Games.Common;
using Deckster.Core.Extensions;

namespace Deckster.Client.Games.TexasHoldEm;

/**
 * Autogenerated by really, really eager small hamsters.
*/

[DebuggerDisplay("TexasHoldEmClient {PlayerData}")]
public class TexasHoldEmClient(IClientChannel channel) : GameClient(channel)
{
    public event Action<GameStartedNotification>? GameStarted;
    public event Action<ItsYourTurnNotification>? ItsYourTurn;
    public event Action<NewRoundStartedNotification>? RoundStarted;
    public event Action<RoundEndedNotification>? RoundEnded;
    public event Action<PlayerBettedNotification>? PlayerBetted;
    public event Action<PlayerAllInNotification>? PlayerAllIn;
    public event Action<PlayerCheckedNotification>? PlayerChecked;
    public event Action<PlayerFoldedNotification>? PlayerFolded;
    public event Action<PlayerCalledNotification>? PlayerCalled;
    public event Action<NewCardsRevealed>? NewCardsRevealed;
    public event Action<GameEndedNotification>? GameEnded;

    public Task<PlayerViewOfGame> PlayerBetRequestAsync(BetRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<PlayerViewOfGame>(request, false, cancellationToken);
    }

    public Task<PlayerViewOfGame> PlayerFoldRequestAsync(FoldRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<PlayerViewOfGame>(request, false, cancellationToken);
    }

    public Task<PlayerViewOfGame> PlayerCheckRequestAsync(CheckRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<PlayerViewOfGame>(request, false, cancellationToken);
    }

    public Task<PlayerViewOfGame> PlayerCallRequestAsync(CallRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<PlayerViewOfGame>(request, false, cancellationToken);
    }

    protected override void OnNotification(DecksterNotification notification)
    {
        try
        {
            switch (notification)
            {
                case GameStartedNotification m:
                    GameStarted?.Invoke(m);
                    return;
                case ItsYourTurnNotification m:
                    ItsYourTurn?.Invoke(m);
                    return;
                case NewRoundStartedNotification m:
                    RoundStarted?.Invoke(m);
                    return;
                case RoundEndedNotification m:
                    RoundEnded?.Invoke(m);
                    return;
                case PlayerBettedNotification m:
                    PlayerBetted?.Invoke(m);
                    return;
                case PlayerAllInNotification m:
                    PlayerAllIn?.Invoke(m);
                    return;
                case PlayerCheckedNotification m:
                    PlayerChecked?.Invoke(m);
                    return;
                case PlayerFoldedNotification m:
                    PlayerFolded?.Invoke(m);
                    return;
                case PlayerCalledNotification m:
                    PlayerCalled?.Invoke(m);
                    return;
                case NewCardsRevealed m:
                    NewCardsRevealed?.Invoke(m);
                    return;
                case GameEndedNotification m:
                    GameEnded?.Invoke(m);
                    return;
                default:
                    return;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}

public static class TexasHoldEmClientConveniences
{
    /// <summary>
    /// does not throw exception on error
    /// </summary>
    public static Task<PlayerViewOfGame> PlayerBetRequestAsync(this TexasHoldEmClient self, int bet, CancellationToken cancellationToken = default)
    {
        var request = new BetRequest{ Bet = bet };
        return self.SendAsync<PlayerViewOfGame>(request, false, cancellationToken);
    }
    /// <summary>
    /// throws exception on error
    /// </summary>
    public static async Task<(List<Card> cards, List<Card> cardsOnTable, int stackSize, int currentBet, int potSize, int bigBlind, int numberOfRoundsUntilBigBlindIncreases, List<OtherPokerPlayers> otherPlayers, Guid nextRoundStartingPlayerId)> PlayerBetRequestOrThrowAsync(this TexasHoldEmClient self, int bet, CancellationToken cancellationToken = default)
    {
        var request = new BetRequest{ Bet = bet };
        var response = await self.SendAsync<PlayerViewOfGame>(request, true, cancellationToken);
        return (response.Cards, response.CardsOnTable, response.StackSize, response.CurrentBet, response.PotSize, response.BigBlind, response.NumberOfRoundsUntilBigBlindIncreases, response.OtherPlayers, response.NextRoundStartingPlayerId);
    }
    /// <summary>
    /// does not throw exception on error
    /// </summary>
    public static Task<PlayerViewOfGame> PlayerFoldRequestAsync(this TexasHoldEmClient self, CancellationToken cancellationToken = default)
    {
        var request = new FoldRequest{  };
        return self.SendAsync<PlayerViewOfGame>(request, false, cancellationToken);
    }
    /// <summary>
    /// throws exception on error
    /// </summary>
    public static async Task<(List<Card> cards, List<Card> cardsOnTable, int stackSize, int currentBet, int potSize, int bigBlind, int numberOfRoundsUntilBigBlindIncreases, List<OtherPokerPlayers> otherPlayers, Guid nextRoundStartingPlayerId)> PlayerFoldRequestOrThrowAsync(this TexasHoldEmClient self, CancellationToken cancellationToken = default)
    {
        var request = new FoldRequest{  };
        var response = await self.SendAsync<PlayerViewOfGame>(request, true, cancellationToken);
        return (response.Cards, response.CardsOnTable, response.StackSize, response.CurrentBet, response.PotSize, response.BigBlind, response.NumberOfRoundsUntilBigBlindIncreases, response.OtherPlayers, response.NextRoundStartingPlayerId);
    }
    /// <summary>
    /// does not throw exception on error
    /// </summary>
    public static Task<PlayerViewOfGame> PlayerCheckRequestAsync(this TexasHoldEmClient self, CancellationToken cancellationToken = default)
    {
        var request = new CheckRequest{  };
        return self.SendAsync<PlayerViewOfGame>(request, false, cancellationToken);
    }
    /// <summary>
    /// throws exception on error
    /// </summary>
    public static async Task<(List<Card> cards, List<Card> cardsOnTable, int stackSize, int currentBet, int potSize, int bigBlind, int numberOfRoundsUntilBigBlindIncreases, List<OtherPokerPlayers> otherPlayers, Guid nextRoundStartingPlayerId)> PlayerCheckRequestOrThrowAsync(this TexasHoldEmClient self, CancellationToken cancellationToken = default)
    {
        var request = new CheckRequest{  };
        var response = await self.SendAsync<PlayerViewOfGame>(request, true, cancellationToken);
        return (response.Cards, response.CardsOnTable, response.StackSize, response.CurrentBet, response.PotSize, response.BigBlind, response.NumberOfRoundsUntilBigBlindIncreases, response.OtherPlayers, response.NextRoundStartingPlayerId);
    }
    /// <summary>
    /// does not throw exception on error
    /// </summary>
    public static Task<PlayerViewOfGame> PlayerCallRequestAsync(this TexasHoldEmClient self, CancellationToken cancellationToken = default)
    {
        var request = new CallRequest{  };
        return self.SendAsync<PlayerViewOfGame>(request, false, cancellationToken);
    }
    /// <summary>
    /// throws exception on error
    /// </summary>
    public static async Task<(List<Card> cards, List<Card> cardsOnTable, int stackSize, int currentBet, int potSize, int bigBlind, int numberOfRoundsUntilBigBlindIncreases, List<OtherPokerPlayers> otherPlayers, Guid nextRoundStartingPlayerId)> PlayerCallRequestOrThrowAsync(this TexasHoldEmClient self, CancellationToken cancellationToken = default)
    {
        var request = new CallRequest{  };
        var response = await self.SendAsync<PlayerViewOfGame>(request, true, cancellationToken);
        return (response.Cards, response.CardsOnTable, response.StackSize, response.CurrentBet, response.PotSize, response.BigBlind, response.NumberOfRoundsUntilBigBlindIncreases, response.OtherPlayers, response.NextRoundStartingPlayerId);
    }
}

public static class TexasHoldEmClientDecksterClientExtensions
{
    public static GameApi<TexasHoldEmClient> TexasHoldEm(this DecksterClient client)
    {
        return new GameApi<TexasHoldEmClient>(client.BaseUri.Append("texasholdem"), client.Token, c => new TexasHoldEmClient(c));
    }
}
